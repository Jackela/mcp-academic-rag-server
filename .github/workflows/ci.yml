name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    services:
      milvus:
        image: milvusdb/milvus:v2.3.4
        ports:
          - 19530:19530
        options: >-
          --health-cmd "curl -f http://localhost:9091/healthz || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libhdf5-dev \
            libopenblas-dev \
            liblapack-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libavcodec-dev \
            libavformat-dev \
            libswscale-dev \
            libv4l-dev \
            libgtk-3-dev \
            libatlas-base-dev \
            gfortran

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-mock pytest-asyncio

      - name: Create test configuration
        run: |
          mkdir -p config
          cp config/config.json.example config/config.json

      - name: Run linting
        run: |
          python -m black --check .
          python -m isort --check-only .
          python -m flake8 .

      - name: Run type checking
        run: python -m mypy . || true

      - name: Run security checks
        run: |
          python -m bandit -r . -f json -o bandit-report.json || true
          python -m safety check --json --output safety-report.json || true

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v --cov-append --cov=. --cov-report=xml
        env:
          PYTHONPATH: ${{ github.workspace }}
          MILVUS_HOST: localhost
          MILVUS_PORT: 19530

      - name: Run component tests
        run: |
          python -m pytest tests/component/ -v --cov-append --cov=. --cov-report=xml
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            coverage.xml
            bandit-report.json
            safety-report.json

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark memory-profiler

      - name: Run performance tests
        run: |
          python -m pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark-results.json
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: benchmark-results.json

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      milvus:
        image: milvusdb/milvus:v2.3.4
        ports:
          - 19530:19530

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install selenium pytest-asyncio

      - name: Set up Chrome
        uses: browser-actions/setup-chrome@latest

      - name: Run E2E tests
        run: |
          python -m pytest tests/e2e/ -v --maxfail=1
        env:
          PYTHONPATH: ${{ github.workspace }}
          MILVUS_HOST: localhost
          MILVUS_PORT: 19530
          HEADLESS: true

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm --name test-container -d -p 8000:8000 ${{ env.IMAGE_NAME }}:test
          sleep 30
          docker exec test-container python health_check.py
          docker stop test-container

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, e2e-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.academic-rag.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Add deployment steps here (e.g., update Kubernetes deployment)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://academic-rag.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Add production deployment steps here

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, e2e-test, docker-build, security-scan]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update release notes
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            
            const changelog = `${{ steps.changelog.outputs.CHANGELOG }}`;
            const body = release.data.body + "\n\n## Changes\n" + changelog;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: body
            });