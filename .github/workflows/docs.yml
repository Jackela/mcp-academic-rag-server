name: Documentation Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'docs/**'
      - 'core/**'
      - 'connectors/**'
      - 'document_stores/**'
      - 'rag/**'
      - 'servers/**'
      - '*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '*.py'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "docs"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r docs/requirements-docs.txt
    
    - name: Check documentation quality
      run: |
        cd docs
        # Check for broken internal links
        sphinx-build -b linkcheck . _build/linkcheck
        
        # Generate coverage report
        sphinx-build -b coverage . _build/coverage
        
        # Check RST syntax
        rstcheck --recursive .
    
    - name: Generate API documentation
      run: |
        cd docs
        sphinx-apidoc -o api ../core ../connectors ../document_stores ../rag ../servers --force
    
    - name: Build HTML documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html -W --keep-going
    
    - name: Build PDF documentation
      if: github.ref == 'refs/heads/main'
      run: |
        cd docs
        # Install LaTeX dependencies
        sudo apt-get update
        sudo apt-get install -y texlive-latex-recommended texlive-fonts-recommended texlive-latex-extra
        
        # Build PDF
        sphinx-build -b latex . _build/latex
        cd _build/latex
        make all-pdf
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          docs/_build/html/
          docs/_build/latex/*.pdf
        retention-days: 30
    
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v3
    
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/_build/html

  deploy-docs:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  validate-examples:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate documentation examples
      run: |
        # Run doctest to validate code examples in documentation
        cd docs
        python -m doctest ../*.py || true
        
        # Test example configurations
        python -c "
        import json
        import sys
        
        try:
            with open('../config/config.example.json', 'r') as f:
                config = json.load(f)
            print('‚úì Example configuration is valid JSON')
        except Exception as e:
            print(f'‚úó Example configuration error: {e}')
            sys.exit(1)
        "
    
    - name: Check documentation completeness
      run: |
        python -c "
        import os
        import sys
        from pathlib import Path
        
        # Check that all Python modules have corresponding documentation
        docs_missing = []
        
        for py_file in Path('.').rglob('*.py'):
            if 'test' in str(py_file) or '__pycache__' in str(py_file):
                continue
            
            # Check if module is documented
            relative_path = str(py_file.relative_to('.'))
            module_name = relative_path.replace('/', '.').replace('.py', '')
            
            # Check if mentioned in docs
            doc_files = list(Path('docs').rglob('*.rst')) + list(Path('docs').rglob('*.md'))
            mentioned = False
            
            for doc_file in doc_files:
                try:
                    content = doc_file.read_text()
                    if module_name in content or py_file.stem in content:
                        mentioned = True
                        break
                except:
                    continue
            
            if not mentioned and py_file.stem not in ['__init__', 'setup', 'conftest']:
                docs_missing.append(relative_path)
        
        if docs_missing:
            print('‚ö†Ô∏è  Modules missing documentation:')
            for module in docs_missing:
                print(f'  - {module}')
        else:
            print('‚úì All modules have documentation coverage')
        "

  notify-status:
    runs-on: ubuntu-latest
    needs: [build-docs, validate-examples]
    if: always()
    
    steps:
    - name: Notify documentation status
      run: |
        if [ "${{ needs.build-docs.result }}" == "success" ] && [ "${{ needs.validate-examples.result }}" == "success" ]; then
          echo "‚úÖ Documentation build and validation completed successfully"
          echo "üìö Documentation is available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        else
          echo "‚ùå Documentation build or validation failed"
          echo "üîç Check the workflow logs for details"
          exit 1
        fi