[pytest]
# pytest configuration file

# Minimum version
minversion = 6.0

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Output options
addopts = 
    -ra
    --strict-markers
    --cov=.
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --junitxml=test-results/junit.xml
    --tb=short
    --maxfail=10
    -v

# Coverage options
[coverage:run]
source = .
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    */migrations/*
    */config/*
    */examples/*
    */docs/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    e2e: marks tests as end-to-end tests
    performance: marks tests as performance tests
    requires_gpu: marks tests that require GPU
    requires_api_key: marks tests that require API keys
    asyncio: marks tests as async

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Asyncio
asyncio_mode = auto

# Timeout
timeout = 300
timeout_method = thread

# Environment variables for tests
env =
    TESTING = true
    LOG_LEVEL = DEBUG
    PYTHONPATH = .