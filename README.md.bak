# 学术文献OCR电子化与智能检索系统

本系统是一个基于API的学术文献OCR电子化、自动分类与智能检索平台，采用流水线架构处理学术文献，将扫描文档转换为结构化电子格式，并提供基于向量数据库的智能检索与自然语言对话功能。

## 系统功能

- **文档OCR处理**：将扫描的学术文献转换为可搜索文本
- **文档结构识别**：自动识别标题、摘要、章节等结构元素
- **内容自动分类**：基于内容对文献进行主题分类和标签标注
- **格式转换**：生成Markdown和PDF输出，保留原文排版
- **向量化存储**：将文档内容转换为向量表示并存入向量数据库
- **智能检索**：通过自然语言查询检索相关文献内容
- **知识对话**：基于文献内容回答用户问题，提供引用来源

## 系统架构

系统分为以下几个主要部分：

1. **前端接口层**：提供用户交互界面（命令行或Web）
2. **核心处理层**：实现文档处理流水线
3. **API集成层**：连接外部OCR、分类和LLM服务
4. **存储层**：管理文件存储和向量数据库
5. **检索生成层**：处理用户查询并生成智能回答

## 快速开始

### 安装

1. 克隆项目仓库
   ```bash
   git clone https://github.com/yourusername/academic-paper-system.git
   cd academic-paper-system
   ```

2. 安装依赖
   ```bash
   pip install -r requirements.txt
   ```

3. 配置系统
   - 复制`config/config.example.json`为`config/config.json`
   - 编辑`config.json`，设置API密钥和存储路径

### 使用文档处理CLI

文档处理CLI是系统的主要入口点，用于管理文档的整个生命周期。

基本语法：

```bash
python -m cli.document_cli <命令> [选项]
```

主要命令：

- **上传并处理文档**
  ```bash
  python -m cli.document_cli upload --file path/to/document.pdf
  ```

- **查询文档信息**
  ```bash
  python -m cli.document_cli info --id document_id
  ```

- **列出所有已处理文档**
  ```bash
  python -m cli.document_cli list
  ```

- **导出处理结果**
  ```bash
  python -m cli.document_cli export --id document_id --format markdown
  ```

更多详细用法请参考 [CLI文档](./cli/README.md)

### 使用聊天对话CLI

聊天对话CLI提供基于文档内容的交互式对话功能。

基本用法：

```bash
python -m cli.chat_cli
```

开始新会话后，可以直接输入问题进行对话。系统会基于已处理的文档内容回答问题。

高级用法：

```bash
# 继续特定会话
python -m cli.chat_cli --session session_id

# 回放会话历史
python -m cli.chat_cli --session session_id --replay

# 查看所有会话
python -m cli.chat_cli --list
```

更多详细用法请参考 [CLI文档](./cli/README.md)

## 运行示例

为了帮助用户快速上手，系统提供了多个示例脚本：

```bash
# 文档处理示例
python -m examples.document_processing_example

# 聊天会话示例
python -m examples.chat_session_example

# 批量处理示例
python -m examples.batch_processing_example

# 交互式聊天界面示例
python -m examples.interactive_chat_example
```

更多示例详情请参考 [示例文档](./examples/README.md)

## 系统测试

系统提供了全面的测试框架，包括单元测试、集成测试和性能测试：

```bash
# 运行所有测试
python -m unittest discover tests

# 运行特定模块的测试
python -m unittest tests.test_document_cli
python -m unittest tests.test_chat_cli
python -m unittest tests.test_integration

# 运行性能测试
python -m unittest tests.test_integration.TestPerformance
```

更多测试详情请参考 [测试文档](./tests/README.md)

## 项目结构

```
学术文献处理系统
├── cli/                    # 命令行界面
│   ├── document_cli.py     # 文档处理CLI
│   ├── chat_cli.py         # 聊天对话CLI
│   └── README.md           # CLI文档
├── config/                 # 配置文件
│   └── config.json         # 系统配置
├── connectors/             # API连接器
│   ├── api_connector.py    # 通用API连接器
│   └── haystack_llm_connector.py # LLM连接器
├── core/                   # 核心组件
│   ├── config_manager.py   # 配置管理器
│   └── pipeline.py         # 处理流水线
├── document_stores/        # 文档存储
│   └── haystack_store.py   # Haystack存储
├── examples/               # 示例脚本
│   ├── document_processing_example.py
│   ├── chat_session_example.py
│   ├── batch_processing_example.py
│   ├── interactive_chat_example.py
│   └── README.md           # 示例文档
├── models/                 # 数据模型
│   ├── document.py         # 文档数据模型
│   └── process_result.py   # 处理结果模型
├── processors/             # 文档处理器
│   ├── base_processor.py   # 处理器基类
│   ├── classification_processor.py
│   ├── format_converter.py
│   ├── haystack_embedding_processor.py
│   ├── ocr_processor.py
│   ├── pre_processor.py
│   └── structure_processor.py
├── rag/                    # 检索增强生成
│   ├── chat_session.py     # 聊天会话
│   ├── haystack_pipeline.py # RAG管道
│   └── prompt_builder.py   # 提示构建
├── retrievers/             # 检索器
│   └── haystack_retriever.py # Haystack检索器
├── tests/                  # 测试框架
│   ├── test_document_cli.py # 文档CLI测试
│   ├── test_chat_cli.py    # 聊天CLI测试
│   ├── test_integration.py # 集成测试
│   └── README.md           # 测试文档
├── utils/                  # 工具函数
│   ├── image_utils.py      # 图像处理工具
│   ├── text_utils.py       # 文本处理工具
│   └── vector_utils.py     # 向量处理工具
├── app.py                  # 主应用入口
├── requirements.txt        # 项目依赖
└── README.md               # 项目文档
```

## 配置说明

系统使用JSON配置文件管理设置，包括以下主要配置项：

- **storage**: 文件存储路径
- **processors**: 各处理器的设置
- **connectors**: API连接器配置
- **rag_settings**: RAG系统配置
- **logging**: 日志配置

详细配置示例请参考`config/config.json`文件。

## 系统特点

- **模块化设计**：各功能模块独立封装，便于维护和扩展
- **API驱动**：核心处理通过外部API实现，灵活性高
- **可扩展架构**：支持增量式开发，轻松添加新功能
- **智能交互**：通过RAG技术提供智能问答能力

## 技术选择

- **编程语言**：Python 3.8+
- **向量数据库**：Milvus
- **文件存储**：本地文件系统
- **OCR处理**：Azure Computer Vision / Google Cloud Vision / 百度OCR
- **向量处理**：OpenAI Embeddings
- **大语言模型**：OpenAI GPT系列

## 贡献指南

欢迎贡献代码、报告问题或提出改进建议。请遵循以下步骤：

1. Fork项目仓库
2. 创建功能分支 (`git checkout -b feature/your-feature`)
3. 提交更改 (`git commit -m 'Add some feature'`)
4. 推送到分支 (`git push origin feature/your-feature`)
5. 创建Pull Request

## 许可证

本项目采用MIT许可证 - 详见LICENSE文件

## 联系方式

如有问题或建议，请通过以下方式联系我们：

- 电子邮件: example@example.com
- 项目Issues: https://github.com/yourusername/academic-paper-system/issues
