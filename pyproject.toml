[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-academic-rag-server"
version = "1.0.0"
description = "A focused MCP server for basic academic document processing and RAG queries"
authors = [
    {name = "MCP Academic RAG Team", email = "noreply@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
keywords = ["mcp", "rag", "document-processing", "academic", "ai"]

dependencies = [
    # Core MCP dependencies
    "mcp>=1.0.0",
    
    # Basic document processing
    "PyPDF2>=3.0.0",
    "Pillow>=10.0.0",
    "pytesseract>=0.3.10",
    
    # RAG pipeline (essential only)
    "haystack-ai>=2.0.0",
    "sentence-transformers>=2.2.0",
    "openai>=1.0.0",
    
    # Basic utilities
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "python-dotenv>=1.0.0",
    
    # Simple vector storage
    "faiss-cpu>=1.7.0",
    
    # Configuration and logging
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
    
    # JSON validation
    "jsonschema>=4.0.0",
]

[project.optional-dependencies]
# Development dependencies (simplified)
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "flake8>=6.0.0",
]

# Enhanced processing (optional for advanced users)
enhanced = [
    "spacy>=3.6.0",          # Only if user wants advanced NLP
    "nltk>=3.8.0",           # Only if user wants additional text processing
]

# Web interface (optional)
web = [
    "flask>=3.0.0",
    "flask-cors>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/mcp-academic-rag-server"
Documentation = "https://github.com/yourusername/mcp-academic-rag-server/blob/main/README.md"
Repository = "https://github.com/yourusername/mcp-academic-rag-server.git"
Issues = "https://github.com/yourusername/mcp-academic-rag-server/issues"
"Bug Reports" = "https://github.com/yourusername/mcp-academic-rag-server/issues"
"Source Code" = "https://github.com/yourusername/mcp-academic-rag-server"

[project.scripts]
# Main MCP server entry point (follows MCP 2024 best practices)
mcp-academic-rag-server = "mcp_server_secure:cli_main"

# Development/testing entry point
mcp-academic-rag-server-dev = "mcp_server:main"

[tool.setuptools]
packages = ["core", "processors", "connectors", "models", "rag", "utils"]
py-modules = ["mcp_server_secure", "mcp_server", "deploy_secure"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.html", "*.css", "*.js"]

[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
(
    /(
        \.eggs
        | \.git
        | \.hg
        | \.mypy_cache
        | \.tox
        | \.venv
        | _build
        | buck-out
        | build
        | dist
    )/
)
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "haystack.*",
    "sentence_transformers.*",
    "mcp.*",
    "cv2.*",
    "pymilvus.*",
    "transformers.*",
    "torch.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--junitxml=test-results/junit.xml",
    "--benchmark-only",
    "--benchmark-autosave",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
severity = "medium"
confidence = "medium"
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    "venv",
    "env",
]
max-complexity = 10