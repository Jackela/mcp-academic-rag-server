apiVersion: apps/v1
kind: Deployment
metadata:
  name: academic-rag-server
  namespace: academic-rag
  labels:
    app: academic-rag-server
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: academic-rag-server
  template:
    metadata:
      labels:
        app: academic-rag-server
        tier: backend
    spec:
      containers:
      - name: academic-rag-server
        image: ghcr.io/yourusername/mcp-academic-rag-server:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 5000
          name: web
        env:
        - name: PYTHONPATH
          value: "/app"
        - name: FLASK_ENV
          value: "production"
        - name: MILVUS_HOST
          value: "milvus-service"
        - name: MILVUS_PORT
          value: "19530"
        envFrom:
        - secretRef:
            name: academic-rag-secrets
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: data-volume
          mountPath: /app/data
        - name: output-volume
          mountPath: /app/output
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: academic-rag-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: academic-rag-data-pvc
      - name: output-volume
        persistentVolumeClaim:
          claimName: academic-rag-output-pvc
      - name: logs-volume
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: milvus-standalone
  namespace: academic-rag
  labels:
    app: milvus
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: milvus
  template:
    metadata:
      labels:
        app: milvus
        tier: database
    spec:
      containers:
      - name: milvus
        image: milvusdb/milvus:v2.3.4
        command:
        - milvus
        - run
        - standalone
        ports:
        - containerPort: 19530
          name: milvus
        - containerPort: 9091
          name: metrics
        env:
        - name: ETCD_ENDPOINTS
          value: "milvus-etcd:2379"
        - name: MINIO_ADDRESS
          value: "milvus-minio:9000"
        volumeMounts:
        - name: milvus-config
          mountPath: /milvus/configs
        - name: milvus-data
          mountPath: /var/lib/milvus
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 9091
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 9091
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: milvus-config
        configMap:
          name: academic-rag-config
          items:
          - key: milvus.yaml
            path: milvus.yaml
      - name: milvus-data
        persistentVolumeClaim:
          claimName: milvus-data-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: milvus-etcd
  namespace: academic-rag
  labels:
    app: milvus-etcd
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: milvus-etcd
  template:
    metadata:
      labels:
        app: milvus-etcd
        tier: database
    spec:
      containers:
      - name: etcd
        image: quay.io/coreos/etcd:v3.5.5
        env:
        - name: ETCD_AUTO_COMPACTION_MODE
          value: revision
        - name: ETCD_AUTO_COMPACTION_RETENTION
          value: "1000"
        - name: ETCD_QUOTA_BACKEND_BYTES
          value: "4294967296"
        - name: ETCD_SNAPSHOT_COUNT
          value: "50000"
        command:
        - etcd
        - --advertise-client-urls=http://0.0.0.0:2379
        - --listen-client-urls=http://0.0.0.0:2379
        - --listen-peer-urls=http://0.0.0.0:2380
        - --auto-compaction-mode=revision
        - --auto-compaction-retention=1000
        - --quota-backend-bytes=4294967296
        - --snapshot-count=50000
        - --initial-cluster=default=http://localhost:2380
        - --initial-advertise-peer-urls=http://localhost:2380
        - --initial-cluster-token=milvus-etcd-token
        - --initial-cluster-state=new
        - --data-dir=/etcd-data
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: peer
        volumeMounts:
        - name: etcd-data
          mountPath: /etcd-data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2379
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 2379
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: etcd-data
        persistentVolumeClaim:
          claimName: etcd-data-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: milvus-minio
  namespace: academic-rag
  labels:
    app: milvus-minio
    tier: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: milvus-minio
  template:
    metadata:
      labels:
        app: milvus-minio
        tier: storage
    spec:
      containers:
      - name: minio
        image: minio/minio:RELEASE.2023-03-20T20-16-18Z
        env:
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
        command:
        - minio
        - server
        - /data
        - --console-address
        - ":9001"
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9001
          name: console
        volumeMounts:
        - name: minio-data
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-data-pvc
      restartPolicy: Always